openapi: 3.0.1
info:
  title: Nalantis API
  description: |-
    Nalantis' v2 REST API is a set of endpoints for semantic analysis and matching.


    A few notes on the usage of the API:

    - If an HTTP status code  of 4xx or 5xx is returned then the response body contains an instance of ApiErrorResponse serialized as JSON.
    - In case a fileURL can be specified with request instances then you first have to POST the binary file to the /files endpoint which returns the required URL.
    - Wherever you can pass the id of a document (id or documentId parameter) you can either use the internal UUID or the external reference in the format 'ER:\<external reference\>' (e.g. ER:cv-john-doe.pdf).
    - The external reference is unique per document type therefore a cv and a job may have the same external reference
  contact:
    name: API team
    url: https://www.nalantis.com
    email: apiteam@nalantis.com
  version: 2.0.0
security:
- bearerAuthenticationJWT: []
tags:
- name: File
  description: Resources for working with files (mainly uploading of binary files
    which can then be used as input for other API endpoints)
- name: Semantic analysis
  description: Resources for analysing text semantically
  externalDocs:
    description: Indepth view on semantic analysis & matching
    url: https://tech.beworkhappy.com/
- name: Document
  description: Resources for handling a collection of documents.
- name: Query
  description: Resources for running queries, both keyword and semantic queries.
- name: Lexicon
  description: Resources for working with lexica (like getting suggestions for inputs
    etc.)
paths:
  /v2/documents:
    post:
      tags:
      - Document
      description: |-
        Add a new document. Returns the URI of the newly created resource in the response header.

        **For a description of the custom fields format please see the CustomFields schema**.

        If you are providing at least one of the location fields the automatic geo location analyzer is skipped and the values provided are used instead.
      operationId: addDocument
      requestBody:
        description: Document index request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentIndexRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentIndexRequest'
        required: true
      responses:
        201:
          description: CREATED - document has been indexed sucessfully. Location header
            of response contains URL of the document.
        400:
          description: BAD REQUEST - in case file input stream or file disposition
            is null.
        404:
          description: NOT FOUND - in case the binary document could not be retrieved.
        409:
          description: CONFLICT - in case a document with the same externalReference
            already exists and the updateIfExists parameter is set to false.
        455:
          description: LANGUAGE NOT ALLOWED - the document language is not allowed.
        456:
          description: NO USABLE CONTENT - the document is empty or too short (might
            also happen if the document only contains images).
  /v2/documents/analyse:
    post:
      tags:
      - Semantic analysis
      description: Get the analysis of an uploaded document and return the result
        in the SemanticAnalysisResponse.
      operationId: analyseDocument
      requestBody:
        description: Analysis request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/SemanticAnalysisRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticAnalysisRequest'
        required: true
      responses:
        200:
          description: The semantic analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticAnalysisResponse'
        400:
          description: BAD REQUEST - in case of missing or wrong input parameters.
        404:
          description: NOT FOUND - in case the document could not be retrieved.
        455:
          description: LANGUAGE NOT ALLOWED - the document language is not allowed
            for this tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        456:
          description: NO USABLE CONTENT - the document is empty or too short (might
            also happen if the document only contains images).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /v2/documents/query/keyword:
    post:
      tags:
      - Query
      description: |-
        Find documents using keyword search. The query parameter in the request instance specifies the Solr query.

        Please note: this search type can be used on all document types.
      operationId: queryKeyword
      requestBody:
        description: Query request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRequestHR'
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequestHR'
        required: true
      responses:
        200:
          description: The query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        400:
          description: BAD REQUEST - in case of a missing or incorrect parameters.
  /v2/documents/query/semantic/generic:
    post:
      tags:
      - Query
      description: |-
        Run a generic semantic query on the indexed documents with the given parameters.

        If a fileURL is specified in the request and the file has been POSTED to the /files endpoint then the file is automatically removed from the cache.

        Please note: this search type can be used on other than HR document types.
      operationId: querySemanticGeneric
      requestBody:
        description: Query request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRequestGeneric'
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequestGeneric'
        required: true
      responses:
        200:
          description: The query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        400:
          description: BAD REQUEST - in case of a missing or incorrect parameters.
  /v2/documents/query/semantic/hr:
    post:
      tags:
      - Query
      description: |-
        Find documents by using semantic matching. They query parameter in the request instance specifies (if set) the text content of the input.

        If a fileURL is specified in the request and the file has been POSTED to the /files endpoint then the file is automatically removed from the cache.

        Please note: this search type can be used on HR document types only (cv,job).
      operationId: querySemanticHR
      requestBody:
        description: Query request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRequestHR'
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequestHR'
        required: true
      responses:
        200:
          description: The query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        400:
          description: BAD REQUEST - in case of a missing or incorrect parameters.
  /v2/documents/selection/all:
    delete:
      tags:
      - Document
      description: |-
        Delete ALL documents.

        __WARNING: Be very carefull with this method since there is no way back once you called this URL!!__

        The query parameter 'confirmation' is used as a safety measure so it is not executed by accient: you have to specify YES-DELETE!, otherwise a BAD_REQUEST is returned.
      operationId: deleteDocumentSelectionAll
      parameters:
      - name: confirmation
        in: query
        description: Safety measure - always specify 'YES-DELETE!'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK - documents have been deleted
        400:
          description: BAD REQUEST - in case of missing or wrong input parameters.
  /v2/documents/selection/byQuery:
    get:
      tags:
      - Document
      description: |-
        Do a keyword search for retrieveing all documents matching the given Solr query.

        This is a shortcut/convenience version of the corresponding /documents/query/keyword POST endpoint for running keyword queries. If you encounter any issues because the query gets to complex or long please use the POST call instead.
      operationId: getDocuments
      parameters:
      - name: q
        in: query
        description: Solr query to use for the keyword search (e.g. content:developer)
        schema:
          type: string
          default: '*:*'
      - name: filterQuery
        in: query
        description: Keyword query used for filtering the matching results. Has no
          impact on the ranking.
        schema:
          type: string
      - name: rows
        in: query
        description: Maximum number of returned documents
        schema:
          type: integer
          format: int32
          default: 10
      - name: start
        in: query
        description: Start position of returned documents
        schema:
          type: integer
          format: int32
          default: 0
      - name: sortBy[]
        in: query
        description: Specify the sort fields and sort order of the result. Can be
          set multiple times.
        schema:
          type: array
          items:
            type: string
        example: <fieldname>:[-1 | 0 | 1] (-1 ..desc, 0 .. unsorted, 1 .. asc)
      - name: resultDetailLevel
        in: query
        description: Level of detail returned in the search result. 0 = light attribute
          value set, 5 = medium set, 9 = full set
        schema:
          type: integer
          format: int32
          default: 5
        example: 0..9
      responses:
        200:
          description: OK - keyword search was successful.
        400:
          description: BAD REQUEST - in case of missing or illegal input parameters.
    delete:
      tags:
      - Document
      description: |-
        Delete the documents which are found via the given query.

        Please note: each document is deleted in its own transaction therefore if the delete of one document fails the process continues until all documents are handled.
      operationId: deleteDocumentSelectionByQuery
      parameters:
      - name: q
        in: query
        description: Solr query to use for the delete (e.g. content:developer)
        required: true
        schema:
          type: string
      - name: numberOfWorkerThreads
        in: query
        description: Number of worker threads to use to delete documents in parallel
        schema:
          type: integer
          format: int32
          default: 10
        example: 1..100
      - name: docDiscoveryQueueDepth
        in: query
        description: Document discovery queue depth
        schema:
          type: integer
          format: int32
          default: 100
        example: 100..10000
      - name: dryRun
        in: query
        description: Determine the number of documents which would be deleted by this
          query but do not actually perform any deletes
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK - Returned object contains the total number of documents,
            the number of successfully deleted and the number of failed documents.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentProcessingStatistics'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentProcessingStatistics'
        400:
          description: BAD REQUEST - in case of missing or wrong input parameters.
  /v2/documents/{id}:
    get:
      tags:
      - Document
      description: Return the details about a specified document. The document is
        identified by the id parameter.
      operationId: getDocument
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      responses:
        400:
          description: BAD REQUEST - in case of missing id.
        404:
          description: NOT FOUND - in case a document with the specified id is not
            found.
    put:
      tags:
      - Document
      description: |-
        Update a document. Returns URI of updated resource in the response header.

        **For a description of the custom fields format please see the CustomFields schema**.

        If you are providing at least one of the location fields the automatic geo location analyzer is skipped and the values provided are used instead.
      operationId: updateDocument
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      requestBody:
        description: Document index request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentIndexRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentIndexRequest'
        required: true
      responses:
        200:
          description: OK - document has been updated sucessfully. Location header
            of response contains URL of the document.
        400:
          description: BAD REQUEST - in case file input stream or file disposition
            is null.
        404:
          description: NOT FOUND - in case the document with the given id is not found
            OR the binary document could not be retrieved.
        409:
          description: CONFLICT - in case a document with the same externalReference
            already exists and the updateIfExists parameter is set to false.
        455:
          description: LANGUAGE NOT ALLOWED - the document language is not allowed.
        456:
          description: NO USABLE CONTENT - the document is empty or too short (might
            also happen if the document only contains images).
    delete:
      tags:
      - Document
      description: Delete a specified document from the search index. The document
        is identified by the id parameter.
      operationId: deleteDocument
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      responses:
        400:
          description: BAD REQUEST - in case of missing id.
        404:
          description: NOT FOUND - in case a document with the specified id is not
            found.
  /v2/documents/{id}/conceptModifier:
    put:
      tags:
      - Document
      description: Adds (or updates) a word to a document. The word is resolved to
        a concept of the given languages and then added / updated.
      operationId: addOrUpdateConceptModifier
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      requestBody:
        description: Request instance for adding (or updating) concept to the document
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddConceptModifierRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AddConceptModifierRequest'
        required: true
      responses:
        400:
          description: BAD REQUEST - in case of missing or wrong input parameters.
        404:
          description: NOT FOUND - in case the referenced document is not found.
    delete:
      tags:
      - Document
      description: Deletes a word from a document. The word is resolved to a concept.
      operationId: deleteConceptModifier
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      - name: word
        in: query
        description: Word to remove from the document
        required: true
        schema:
          type: string
      responses:
        400:
          description: BAD REQUEST - in case of missing or wrong input parameters.
        404:
          description: NOT FOUND - in case the referenced document is not found.
  /v2/documents/{id}/customFields:
    get:
      tags:
      - Document
      description: |-
        Get the custom fields stored for the specified document.

        Please note: only JSON serialization is supported atm.
      operationId: getCustomFields
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      responses:
        400:
          description: BAD REQUEST - in case of missing id.
        404:
          description: NOT FOUND - in case a document with the specified id is not
            found.
    put:
      tags:
      - Document
      description: |-
        Set the custom fields for the specified document.

        Please note: only JSON serialization is supported atm.
      operationId: setCustomFields
      parameters:
      - name: id
        in: path
        description: ID of the document
        required: true
        schema:
          type: string
      requestBody:
        description: Custom fields to set
        content:
          application/xml:
            schema:
              type: object
              additionalProperties:
                type: string
                description: "The custom fields can be used to store additional data\
                  \ with a document.\n\nThis type implements a Map with the fieldname\
                  \ as key and the value (as String) as value.\n\nThe ending of the\
                  \ field name determines the datatype:\n```\nnone or _s = string,\n\
                  _i = integer,\n_l = long\n_b = boolean (allowable values true|false)\n\
                  _f = float\n_d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n\
                  ```\nIf the field type is string a second field with suffix _tci\
                  \ is automatically added for case-independent search. The final\
                  \ field name for using it in keyword queries is constructed by adding\
                  \ the prefix 'cust_'. For instance if you add a field named 'ourDocID_s'\
                  \ the name to use in queries would be 'cust_ourDocID_s'. "
              description: "The custom fields can be used to store additional data\
                \ with a document.\n\nThis type implements a Map with the fieldname\
                \ as key and the value (as String) as value.\n\nThe ending of the\
                \ field name determines the datatype:\n```\nnone or _s = string,\n\
                _i = integer,\n_l = long\n_b = boolean (allowable values true|false)\n\
                _f = float\n_d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n\
                ```\nIf the field type is string a second field with suffix _tci is\
                \ automatically added for case-independent search. The final field\
                \ name for using it in keyword queries is constructed by adding the\
                \ prefix 'cust_'. For instance if you add a field named 'ourDocID_s'\
                \ the name to use in queries would be 'cust_ourDocID_s'. "
              xml:
                name: customFields
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
                description: "The custom fields can be used to store additional data\
                  \ with a document.\n\nThis type implements a Map with the fieldname\
                  \ as key and the value (as String) as value.\n\nThe ending of the\
                  \ field name determines the datatype:\n```\nnone or _s = string,\n\
                  _i = integer,\n_l = long\n_b = boolean (allowable values true|false)\n\
                  _f = float\n_d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n\
                  ```\nIf the field type is string a second field with suffix _tci\
                  \ is automatically added for case-independent search. The final\
                  \ field name for using it in keyword queries is constructed by adding\
                  \ the prefix 'cust_'. For instance if you add a field named 'ourDocID_s'\
                  \ the name to use in queries would be 'cust_ourDocID_s'. "
              description: "The custom fields can be used to store additional data\
                \ with a document.\n\nThis type implements a Map with the fieldname\
                \ as key and the value (as String) as value.\n\nThe ending of the\
                \ field name determines the datatype:\n```\nnone or _s = string,\n\
                _i = integer,\n_l = long\n_b = boolean (allowable values true|false)\n\
                _f = float\n_d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n\
                ```\nIf the field type is string a second field with suffix _tci is\
                \ automatically added for case-independent search. The final field\
                \ name for using it in keyword queries is constructed by adding the\
                \ prefix 'cust_'. For instance if you add a field named 'ourDocID_s'\
                \ the name to use in queries would be 'cust_ourDocID_s'. "
              xml:
                name: customFields
        required: true
      responses:
        400:
          description: BAD REQUEST - in case of missing id.
        404:
          description: NOT FOUND - in case a document with the specified id is not
            found.
  /v2/files:
    post:
      tags:
      - File
      description: |-
        Store the given file in a cache for later use.

        Please note: depending on the back-ends cache configuration the file gets removed from the cache automatically after some time.
      operationId: uploadFileBinary
      parameters:
      - name: filename
        in: query
        description: Name of the posted file
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
      responses:
        201:
          description: CREATED - file has been successfully stored. Location field
            of the the response contains the URL of the file.
        400:
          description: BAD REQUEST - if the file size is larger than the configured
            maximum value.
  /v2/files/{id}:
    get:
      tags:
      - File
      description: Get an uploaded file from the cache.
      operationId: getFileBinary
      parameters:
      - name: id
        in: path
        description: Id of uploaded file
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK - file has been found and returned.
        404:
          description: NOT FOUND - file with the given id has not been found in cache.
    delete:
      tags:
      - File
      description: Remove an uploaded file from the cache.
      operationId: deleteFile
      parameters:
      - name: id
        in: path
        description: Id of uploaded file
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK - file has been found and removed.
        404:
          description: NOT FOUND - file with the given id has not been found in cache.
  /v2/lexicon/suggestions:
    post:
      tags:
      - Lexicon
      description: Return a list of lexicon suggestions for the given languages.
      operationId: getSuggestions
      requestBody:
        description: Lexicion suggestions request
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/LexiconSuggestionsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LexiconSuggestionsRequest'
        required: true
      responses:
        200:
          description: The lexicon suggestion results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexicionSuggestionsResponse'
        400:
          description: BAD REQUEST - in case of a missing or incorrect parameters.
components:
  schemas:
    AddConceptModifierRequest:
      required:
      - languages
      - word
      type: object
      properties:
        word:
          type: string
          description: Word to add - resolves to concepts by using the language models
            of the given languages
        languages:
          type: array
          description: List of ISO 639-1 language codes (2 letter code)
          items:
            type: string
            description: List of ISO 639-1 language codes (2 letter code)
            xml:
              name: languages
      description: Represents the request for adding a concept (determined by the
        word in the given languages).
      xml:
        name: addConceptModifierRequest
    ApiErrorResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of response class. Currently always 1.0
        httpStatusCode:
          type: integer
          description: HTTP status code of response. Mirrors HTTP response status
            line for convenience.
          format: int32
        httpStatusReason:
          type: string
          description: HTTP status reason of response. Mirrors HTTP response status
            line for convenience.
        apiCode:
          type: string
          description: API specific error code.
        developerMessage:
          type: string
          description: More detailed description of the error. Useful for API consumers.
        moreInfo:
          type: string
          description: Link to a more indepth documentation of the apiCode.
          format: url
      description: Response entity in case an error occurs in the API call. All attributes
        except version may be null.
      xml:
        name: error
    Category:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        concepts:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Concept'
      xml:
        name: category
    CategoryMatch:
      type: object
      properties:
        name:
          type: string
        score:
          type: number
          format: float
        conceptMatches:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ConceptMatch'
    Concept:
      type: object
      properties:
        name:
          type: string
        word:
          type: string
        level:
          type: integer
          format: int32
      xml:
        name: concept
    ConceptMatch:
      type: object
      properties:
        sourceConcept:
          $ref: '#/components/schemas/Concept'
        targetConcepts:
          type: array
          items:
            $ref: '#/components/schemas/Concept'
      xml:
        name: conceptMatch
    CustomFields:
      type: object
      additionalProperties:
        type: string
        description: "The custom fields can be used to store additional data with\
          \ a document.\n\nThis type implements a Map with the fieldname as key and\
          \ the value (as String) as value.\n\nThe ending of the field name determines\
          \ the datatype:\n```\nnone or _s = string,\n_i = integer,\n_l = long\n_b\
          \ = boolean (allowable values true|false)\n_f = float\n_d = double\n_tdt\
          \ = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the field type is string\
          \ a second field with suffix _tci is automatically added for case-independent\
          \ search. The final field name for using it in keyword queries is constructed\
          \ by adding the prefix 'cust_'. For instance if you add a field named 'ourDocID_s'\
          \ the name to use in queries would be 'cust_ourDocID_s'. "
      description: "The custom fields can be used to store additional data with a\
        \ document.\n\nThis type implements a Map with the fieldname as key and the\
        \ value (as String) as value.\n\nThe ending of the field name determines the\
        \ datatype:\n```\nnone or _s = string,\n_i = integer,\n_l = long\n_b = boolean\
        \ (allowable values true|false)\n_f = float\n_d = double\n_tdt = date (in\
        \ format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the field type is string a second\
        \ field with suffix _tci is automatically added for case-independent search.\
        \ The final field name for using it in keyword queries is constructed by adding\
        \ the prefix 'cust_'. For instance if you add a field named 'ourDocID_s' the\
        \ name to use in queries would be 'cust_ourDocID_s'. "
      xml:
        name: customFields
    DocumentIndexRequest:
      required:
      - documentType
      - fileURL
      type: object
      properties:
        fileURL:
          type: string
          description: URL of file to be indexed
          format: url
        documentType:
          type: string
          description: Type of document to be indexed
          enum:
          - cv
          - job
          - competence
          - citynet
          - legal
        externalReference:
          type: string
          description: An external reference value which can be used to 'link' the
            indexed document to an external store.
        updateIfExists:
          type: boolean
          description: If a document with the same external reference as specified
            with this request exists, the existing document will be replaced if this
            parameter is set to true. If set to false a 409 CONFLICT error will be
            returned.
          default: false
        language:
          type: string
          description: Language of uploaded document in ISO 639-1 format. If missing
            it is detected automatically.
        customFields:
          type: object
          additionalProperties:
            type: string
            description: "The custom fields can be used to store additional data with\
              \ a document.\n\nThis type implements a Map with the fieldname as key\
              \ and the value (as String) as value.\n\nThe ending of the field name\
              \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
              _l = long\n_b = boolean (allowable values true|false)\n_f = float\n\
              _d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
              \ field type is string a second field with suffix _tci is automatically\
              \ added for case-independent search. The final field name for using\
              \ it in keyword queries is constructed by adding the prefix 'cust_'.\
              \ For instance if you add a field named 'ourDocID_s' the name to use\
              \ in queries would be 'cust_ourDocID_s'. "
          description: "The custom fields can be used to store additional data with\
            \ a document.\n\nThis type implements a Map with the fieldname as key\
            \ and the value (as String) as value.\n\nThe ending of the field name\
            \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
            _l = long\n_b = boolean (allowable values true|false)\n_f = float\n_d\
            \ = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
            \ field type is string a second field with suffix _tci is automatically\
            \ added for case-independent search. The final field name for using it\
            \ in keyword queries is constructed by adding the prefix 'cust_'. For\
            \ instance if you add a field named 'ourDocID_s' the name to use in queries\
            \ would be 'cust_ourDocID_s'. "
          xml:
            name: customFields
        documentLocation:
          $ref: '#/components/schemas/Location'
      description: Represents the request for indexing a document.
      xml:
        name: DocumentIndexRequest
    DocumentProcessingStatistics:
      type: object
      properties:
        totalDocuments:
          type: integer
          format: int64
        processedDocuments:
          type: integer
          format: int64
        successDocuments:
          type: integer
          format: int64
        errorDocuments:
          type: integer
          format: int64
      xml:
        name: documentProcessingStatistics
    DomainMatches:
      type: object
      properties:
        domains:
          type: array
          items:
            type: string
            xml:
              name: topUniversities
        score:
          type: number
          format: float
    FacetingQueryParameters:
      type: object
      properties:
        empty:
          type: boolean
      additionalProperties:
        type: array
        description: Faceting specifications (key-value pairs)
        example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
        items:
          type: string
          description: Faceting specifications (key-value pairs)
          example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
      description: Faceting specifications (key-value pairs)
      example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
    JobSummary:
      type: object
      properties:
        jobTitle:
          type: string
        mainFunctionDomain:
          type: string
        subCategories:
          uniqueItems: true
          type: array
          items:
            type: string
            xml:
              name: subCategories
        environments:
          uniqueItems: true
          type: array
          items:
            type: string
            xml:
              name: environments
        location:
          $ref: '#/components/schemas/Location'
        requiredEducation:
          type: string
      xml:
        name: jobSummary
    JobTimeline:
      type: object
      properties:
        job:
          type: string
        beginDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        durationInMonths:
          type: integer
          format: int32
      xml:
        name: jobTimeline
    LexicionSuggestionsResponse:
      type: object
      properties:
        suggestions:
          type: array
          description: List of suggestions
          items:
            $ref: '#/components/schemas/LexiconEntry'
      description: Represents the response for retrieving suggestions from the lexicon.
      xml:
        name: lexicionSuggestionsResponse
    LexiconEntry:
      type: object
      properties:
        word:
          type: string
          description: The lexicon word entry
        language:
          type: string
          description: Language of the lexicon word entry
      description: Word-language pair representing a lexicon entry
      xml:
        name: lexiconEntry
    LexiconSuggestionsRequest:
      required:
      - inputString
      - languages
      type: object
      properties:
        inputString:
          maxLength: 100
          minLength: 3
          type: string
          description: The input string to find suggestions for
          example: devel
        maximumNumberOfSuggestions:
          maximum: 20
          minimum: 1
          type: integer
          description: Maximum number of returned suggestions
          format: int32
          example: 10
          default: 10
        languages:
          maxItems: 10
          minItems: 1
          type: array
          items:
            type: string
            description: Specifies the languages to use for the lookup (in ISO 639-1
              format - 2 characters long)
            example: en
            xml:
              name: languages
      description: Represents the request for retrieving suggestions from the lexicon.
      xml:
        name: lexicionSuggestionsRequest
    Location:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/LocationCoordinates'
        city:
          type: string
          description: City name of location
        country:
          type: string
          description: Country name of location in 'ISO 3166-1 alpha-2' format (e.g.
            US)
      xml:
        name: location
    LocationCoordinates:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
      description: Geo coordinates of location
      xml:
        name: locationCoordinates
    MatchConceptCategory:
      type: object
      properties:
        name:
          type: string
      xml:
        name: matchConceptCategory
    MatchDetails:
      type: object
      properties:
        score:
          type: number
          format: float
        categories:
          type: array
          xml:
            name: category
          items:
            $ref: '#/components/schemas/CategoryMatch'
        domainMatches:
          $ref: '#/components/schemas/DomainMatches'
      xml:
        name: matchdetails
    PatternMatch:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        position:
          $ref: '#/components/schemas/PatternMatchPosition'
        satelliteMatches:
          type: array
          items:
            $ref: '#/components/schemas/SatelliteMatch'
      xml:
        name: patternMatch
    PatternMatchPosition:
      type: object
      properties:
        begin:
          type: integer
          format: int32
          xml:
            attribute: true
        end:
          type: integer
          format: int32
          xml:
            attribute: true
      xml:
        name: patternMatchPosition
    QueryRequestGeneric:
      type: object
      properties:
        query:
          type: string
          description: Query string. Context depends on query type
        fileURL:
          type: string
          description: URL of file to be used as input in case of semantic matching
          format: url
        documentId:
          type: string
          description: UUID of an already indexed document to be used as input in
            case of semantic matching
        inputDocumentType:
          type: string
          description: Type of source document
          enum:
          - cv
          - job
          - competence
          - citynet
          - legal
        targetDocumentType:
          type: string
          description: Type of target document
        filterQuery:
          type: string
          description: Keyword query used for filtering the matching results. Has
            no impact on the ranking.
        facetingQueryParameters:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            description: Faceting specifications (key-value pairs)
            example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
            items:
              type: string
              description: Faceting specifications (key-value pairs)
              example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
          description: Faceting specifications (key-value pairs)
          example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
        inputLanguage:
          type: string
          description: |-
            Language of the input document / query. Can be used to override automatic detection. Format is ISO 639-1 2 letter char code.

            In case the query string input is used and the query is rather short (like a sentence), the input language should be specified since the automatic language detection might not work 100% in those cases.
        rows:
          maximum: 500
          minimum: 0
          type: integer
          description: Maximum number of documents to return starting at start
          format: int32
          default: 10
        resultDetailLevel:
          maximum: 9
          minimum: 0
          type: integer
          description: Level of detail returned in the search result. 0 = light attribute
            value set, 9 = full set
          format: int32
          default: 0
      description: Represents the request for querying documents using the generic
        semantic matching.
      xml:
        name: queryRequestGeneric
    QueryRequestHR:
      type: object
      properties:
        query:
          type: string
          description: Query string. Context depends on query type
        fileURL:
          type: string
          description: URL of file to be used as input in case of semantic matching
          format: url
        documentId:
          type: string
          description: UUID of an already indexed document to be used as input in
            case of semantic matching
        inputDocumentType:
          type: string
          description: Type of source document
          enum:
          - cv
          - job
          - competence
          - citynet
          - legal
        targetDocumentType:
          type: string
          description: Type of target document
        filterQuery:
          type: string
          description: Keyword query used for filtering the matching results. Has
            no impact on the ranking.
        facetingQueryParameters:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            description: Faceting specifications (key-value pairs)
            example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
            items:
              type: string
              description: Faceting specifications (key-value pairs)
              example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
          description: Faceting specifications (key-value pairs)
          example: '''range'':[''publication_date_dt''],''range.start'':[''NOW/YEAR-15YEAR''],''range.end'':[''NOW''],''range.gap'':[''+1YEAR'']'
        inputLanguage:
          type: string
          description: |-
            Language of the input document / query. Can be used to override automatic detection. Format is ISO 639-1 2 letter char code.

            In case the query string input is used and the query is rather short (like a sentence), the input language should be specified since the automatic language detection might not work 100% in those cases.
        rows:
          maximum: 500
          minimum: 0
          type: integer
          description: Maximum number of documents to return starting at start
          format: int32
          default: 10
        resultDetailLevel:
          maximum: 9
          minimum: 0
          type: integer
          description: Level of detail returned in the search result. 0 = light attribute
            value set, 9 = full set
          format: int32
          default: 0
        start:
          minimum: 0
          type: integer
          description: Zero based offset of matching documents to retrieve (only used
            in keyword search)
          format: int32
          default: 0
        languageFilter:
          type: array
          description: Filter results to include only given list of ISO 639-1 char
            codes
          items:
            type: string
            description: Filter results to include only given list of ISO 639-1 char
              codes
            xml:
              name: languageFilter
        matchingCriteriaWeights:
          type: object
          additionalProperties:
            type: integer
            description: Matching criteria weights
            format: int32
          description: Matching criteria weights
        maxDistance:
          maximum: 20000
          minimum: 0
          type: integer
          description: Filter results to include only results within the given radius
            (in km) of the document
          format: int32
        minimumMatchingScoreInPercent:
          maximum: 100
          minimum: 0
          type: integer
          description: Filter results that have a matching score below the given value
          format: int32
        sortByClauses:
          type: array
          description: Specify the sort fields and sort order of the result. Can be
            set multiple times.
          format: <fieldname>:[-1 | 0 | 1] (-1 ..desc, 0 .. unsorted, 1 .. asc)
          items:
            type: string
            description: Specify the sort fields and sort order of the result. Can
              be set multiple times.
            format: <fieldname>:[-1 | 0 | 1] (-1 ..desc, 0 .. unsorted, 1 .. asc)
            xml:
              name: sortByClauses
      description: Represents the request for querying documents either by keyword
        or HR semantic matching.
      xml:
        name: queryRequestHR
    QueryResponse:
      type: object
    QueryResultDocument:
      type: object
      properties:
        externalReference:
          type: string
        originalURI:
          type: string
        resourceUri:
          type: string
          format: uri
          xml:
            name: resourceURI
        binaryURI:
          type: string
          format: uri
        mimeType:
          type: string
        documentType:
          type: string
        content:
          type: string
        customFields:
          type: object
          additionalProperties:
            type: string
            description: "The custom fields can be used to store additional data with\
              \ a document.\n\nThis type implements a Map with the fieldname as key\
              \ and the value (as String) as value.\n\nThe ending of the field name\
              \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
              _l = long\n_b = boolean (allowable values true|false)\n_f = float\n\
              _d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
              \ field type is string a second field with suffix _tci is automatically\
              \ added for case-independent search. The final field name for using\
              \ it in keyword queries is constructed by adding the prefix 'cust_'.\
              \ For instance if you add a field named 'ourDocID_s' the name to use\
              \ in queries would be 'cust_ourDocID_s'. "
          description: "The custom fields can be used to store additional data with\
            \ a document.\n\nThis type implements a Map with the fieldname as key\
            \ and the value (as String) as value.\n\nThe ending of the field name\
            \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
            _l = long\n_b = boolean (allowable values true|false)\n_f = float\n_d\
            \ = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
            \ field type is string a second field with suffix _tci is automatically\
            \ added for case-independent search. The final field name for using it\
            \ in keyword queries is constructed by adding the prefix 'cust_'. For\
            \ instance if you add a field named 'ourDocID_s' the name to use in queries\
            \ would be 'cust_ourDocID_s'. "
          xml:
            name: customFields
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        printedDate:
          type: string
          format: date-time
        publicationDate:
          type: string
          format: date-time
        seniorityLevel:
          type: string
        workClassLevel:
          type: string
        academicLevel:
          type: string
        educationLevel:
          type: string
        domains:
          type: array
          items:
            type: string
            xml:
              name: domains
        semanticMatches:
          type: array
          items:
            $ref: '#/components/schemas/PatternMatch'
        competenceMatches:
          type: string
        professionCompetences:
          type: string
        language:
          type: string
        completenessInPercent:
          type: integer
          format: int32
        confidenceInPercent:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/Location'
        conceptsPerCategory:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        speedCV:
          $ref: '#/components/schemas/SpeedCV'
        jobSummary:
          $ref: '#/components/schemas/JobSummary'
        studentJobType:
          type: string
        gender:
          type: string
        languageLevels:
          type: object
          additionalProperties:
            type: string
            xml:
              name: matchingConcepts
        hasManualConceptModifiers:
          type: boolean
        topUniversities:
          type: array
          items:
            type: string
            xml:
              name: topUniversities
        scoreInPercent:
          type: number
          format: float
        matchDetails:
          $ref: '#/components/schemas/MatchDetails'
        trafficLightWeight:
          type: string
        completenessWeight:
          type: number
          format: float
        highlighting:
          type: array
          items:
            type: string
            xml:
              name: highlighting
        summary:
          type: string
        distanceInKM:
          type: integer
          format: int32
        matchingConcepts:
          type: array
          items:
            type: string
            xml:
              name: matchingConcepts
        paragraphs:
          type: array
          items:
            $ref: '#/components/schemas/QueryResultParagraph'
      description: List of result documents
      xml:
        name: queryResultDocument
    QueryResultParagraph:
      type: object
      properties:
        externalReference:
          type: string
        originalURI:
          type: string
        resourceUri:
          type: string
          format: uri
          xml:
            name: resourceURI
        binaryURI:
          type: string
          format: uri
        mimeType:
          type: string
        documentType:
          type: string
        content:
          type: string
        customFields:
          type: object
          additionalProperties:
            type: string
            description: "The custom fields can be used to store additional data with\
              \ a document.\n\nThis type implements a Map with the fieldname as key\
              \ and the value (as String) as value.\n\nThe ending of the field name\
              \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
              _l = long\n_b = boolean (allowable values true|false)\n_f = float\n\
              _d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
              \ field type is string a second field with suffix _tci is automatically\
              \ added for case-independent search. The final field name for using\
              \ it in keyword queries is constructed by adding the prefix 'cust_'.\
              \ For instance if you add a field named 'ourDocID_s' the name to use\
              \ in queries would be 'cust_ourDocID_s'. "
          description: "The custom fields can be used to store additional data with\
            \ a document.\n\nThis type implements a Map with the fieldname as key\
            \ and the value (as String) as value.\n\nThe ending of the field name\
            \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
            _l = long\n_b = boolean (allowable values true|false)\n_f = float\n_d\
            \ = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
            \ field type is string a second field with suffix _tci is automatically\
            \ added for case-independent search. The final field name for using it\
            \ in keyword queries is constructed by adding the prefix 'cust_'. For\
            \ instance if you add a field named 'ourDocID_s' the name to use in queries\
            \ would be 'cust_ourDocID_s'. "
          xml:
            name: customFields
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        printedDate:
          type: string
          format: date-time
        publicationDate:
          type: string
          format: date-time
        seniorityLevel:
          type: string
        workClassLevel:
          type: string
        academicLevel:
          type: string
        educationLevel:
          type: string
        domains:
          type: array
          items:
            type: string
            xml:
              name: matchingConcepts
        semanticMatches:
          type: array
          items:
            $ref: '#/components/schemas/PatternMatch'
        competenceMatches:
          type: string
        professionCompetences:
          type: string
        language:
          type: string
        completenessInPercent:
          type: integer
          format: int32
        confidenceInPercent:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/Location'
        conceptsPerCategory:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        speedCV:
          $ref: '#/components/schemas/SpeedCV'
        jobSummary:
          $ref: '#/components/schemas/JobSummary'
        studentJobType:
          type: string
        gender:
          type: string
        languageLevels:
          type: object
          additionalProperties:
            type: string
            xml:
              name: matchingConcepts
        hasManualConceptModifiers:
          type: boolean
        topUniversities:
          type: array
          items:
            type: string
            xml:
              name: matchingConcepts
        scoreInPercent:
          type: number
          format: float
        highlighting:
          type: array
          items:
            type: string
            xml:
              name: matchingConcepts
        highlightBegin:
          type: integer
          format: int32
        highlightEnd:
          type: integer
          format: int32
        matchingConcepts:
          type: array
          items:
            type: string
            xml:
              name: matchingConcepts
      xml:
        name: queryResultParagraph
    SatelliteMatch:
      type: object
      properties:
        word:
          type: string
        conceptName:
          type: string
      xml:
        name: satelliteMatch
    SemanticAnalysisOptions:
      type: object
      properties:
        disableTimelinePruning:
          type: boolean
          description: Disable time pruning
          default: false
        disableSpellChecking:
          type: boolean
          description: Disable spell checking
          default: false
        disablePatternUnification:
          type: boolean
          description: Disable pattern unification
          default: false
        disableGeoAnalysis:
          type: boolean
          description: Disable geo analysis
          default: false
        disableInternships:
          type: boolean
          description: Disable internships
          default: false
        useConceptSearchMode:
          type: boolean
          description: Use concept search mode
          default: false
      description: Options for the semantic analysis.
      xml:
        name: advancedAnalysisOptions
    SemanticAnalysisRequest:
      required:
      - documentType
      - fileURL
      type: object
      properties:
        fileURL:
          type: string
          description: URL of file to be analysed
          format: url
        documentType:
          type: string
          description: Type of document to be analysed
        semanticAnalysisOptions:
          $ref: '#/components/schemas/SemanticAnalysisOptions'
        findRelatedConcepts:
          type: boolean
          description: Return related concepts in the result
          default: false
      description: Represents the request for analysing a document semantically.
      xml:
        name: analysisRequest
    SemanticAnalysisResponse:
      type: object
      properties:
        semanticDocument:
          $ref: '#/components/schemas/SemanticDocument'
        knowledgeCompetenceMatches:
          type: string
        implicitCompetences:
          type: string
        mappedCompetences:
          type: string
        jobTimelines:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/JobTimeline'
        professionMappings:
          type: object
          additionalProperties:
            type: string
            xml:
              name: topUniversities
        relatedConcepts:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              uniqueItems: true
              type: array
              items:
                type: string
                xml:
                  name: topUniversities
      xml:
        name: analysis
    SemanticDocument:
      type: object
      properties:
        externalReference:
          type: string
        originalURI:
          type: string
        resourceUri:
          type: string
          format: uri
          xml:
            name: resourceURI
        binaryURI:
          type: string
          format: uri
        mimeType:
          type: string
        documentType:
          type: string
        content:
          type: string
        customFields:
          type: object
          additionalProperties:
            type: string
            description: "The custom fields can be used to store additional data with\
              \ a document.\n\nThis type implements a Map with the fieldname as key\
              \ and the value (as String) as value.\n\nThe ending of the field name\
              \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
              _l = long\n_b = boolean (allowable values true|false)\n_f = float\n\
              _d = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
              \ field type is string a second field with suffix _tci is automatically\
              \ added for case-independent search. The final field name for using\
              \ it in keyword queries is constructed by adding the prefix 'cust_'.\
              \ For instance if you add a field named 'ourDocID_s' the name to use\
              \ in queries would be 'cust_ourDocID_s'. "
          description: "The custom fields can be used to store additional data with\
            \ a document.\n\nThis type implements a Map with the fieldname as key\
            \ and the value (as String) as value.\n\nThe ending of the field name\
            \ determines the datatype:\n```\nnone or _s = string,\n_i = integer,\n\
            _l = long\n_b = boolean (allowable values true|false)\n_f = float\n_d\
            \ = double\n_tdt = date (in format YYYY-MM-DDThh:mm:ssZ)\n```\nIf the\
            \ field type is string a second field with suffix _tci is automatically\
            \ added for case-independent search. The final field name for using it\
            \ in keyword queries is constructed by adding the prefix 'cust_'. For\
            \ instance if you add a field named 'ourDocID_s' the name to use in queries\
            \ would be 'cust_ourDocID_s'. "
          xml:
            name: customFields
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        printedDate:
          type: string
          format: date-time
        publicationDate:
          type: string
          format: date-time
        seniorityLevel:
          type: string
        workClassLevel:
          type: string
        academicLevel:
          type: string
        educationLevel:
          type: string
        domains:
          type: array
          items:
            type: string
            xml:
              name: domains
        semanticMatches:
          type: array
          items:
            $ref: '#/components/schemas/PatternMatch'
        competenceMatches:
          type: string
        professionCompetences:
          type: string
        language:
          type: string
        completenessInPercent:
          type: integer
          format: int32
        confidenceInPercent:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/Location'
        conceptsPerCategory:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        speedCV:
          $ref: '#/components/schemas/SpeedCV'
        jobSummary:
          $ref: '#/components/schemas/JobSummary'
        studentJobType:
          type: string
        gender:
          type: string
        languageLevels:
          type: object
          additionalProperties:
            type: string
            xml:
              name: topUniversities
        hasManualConceptModifiers:
          type: boolean
        topUniversities:
          type: array
          items:
            type: string
            xml:
              name: topUniversities
      xml:
        name: semanticDocument
    SpeedCV:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        email:
          type: string
        phone:
          type: string
        domains:
          type: string
        lastWorkingExperience:
          type: string
        nrYearsActive:
          type: string
        lastEducation:
          type: string
        languages:
          type: string
        age:
          type: string
      xml:
        name: speedCV
  securitySchemes:
    bearerAuthenticationJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
